void main() {
  PaintBrush.setManipImage(new PaintBrushManipImage() {
                             // NE RIEN ECRIRE AU DESSUS DE CETTE ZONE

                             // Affiche un point de coordonnées (x,y)
                             public void affichePoint(int x, int y, int couleur) {
                               if((0 <= x) && (x <= 31) && (0 <= y) && (y <= 31)) {
                                 setPixel(x, y, couleur);
                               }
                             }

                             // Supprime les points sur une zone carrée
                             // de largeur 3 pixels et centrée en (x,y)
                             public void supprimePoint(int x, int y) {
                               for(int i = -1; i <= 1; i++)
                                 for(int j = -1; j <= 1; j++)
                                   setPixel(x + i, y + j, 15);
                             }

                             // Trace une ligne de diagonale (x0,y0) -- (x1,y1)
                             public void afficheLigne(int x0, int y0, int x1, int y1, int couleur) {
                               if(x0 < x1) {
                                 afficheLigneAux(x0, y0, x1, y1, couleur);
                                 return;
                               }
                               if(x0 > x1) {
                                 afficheLigneAux(x1, y1, x0, y0, couleur);
                                 return;
                               }
                               assertion(x0 == x1, "Egalité");
                               for(int y = min(y0, y1); y <= max(y0, y1); y++)
                                 setPixel(x0, y, couleur);
                             }

                             // Cas particulier quand x0 < x1
                             void afficheLigneAux(int x0, int y0, int x1, int y1, int couleur) {
                               double pente = ((double) (y1 - y0)) / (x1 - x0);
                               assertion(abs(pente) <= 1, "Pente plus grande que 1: nous ne traitons pas ce cas symétrique");
                               for(int x = x0; x <= x1; x++) {
                                 double dx = (double) x;
                                 int y = (int) floor(pente * (x - x0) + y0 + .5);
                                 setPixel(x, y, couleur);
                               }
                             }

                             // Trace un rectangle de diagonale (x0,y0) -- (x1,y1)
                             public void afficheRectangle(int x0, int y0, int x1, int y1, int couleur) {
                               // Point en bas à gauche
                               int xmin = min(x0, x1);
                               int ymin = min(y0, y1);

                               // Point en haut à droite
                               int xmax = max(x0, x1);
                               int ymax = max(y0, y1);
                               // Lignes horizontales
                               for(int i = xmin; i <= xmax; i++) {
                                 setPixel(i, ymin, couleur);
                                 setPixel(i, ymax, couleur);
                               }
                               // Lignes verticales
                               for(int j = ymin; j <= ymax; j++) {
                                 setPixel(xmin, j, couleur);
                                 setPixel(xmax, j, couleur);
                               }
                             }

                             // Pot de peinture : remplir avec la couleur spécifiée tous les
                             // pixels voisins de (x,y) et ayant la même couleur
                             public void remplir(int x, int y, int nouvelleCouleur) {
                               int ancienneCouleur = PaintBrush.getPixel(x, y);
                               if(ancienneCouleur != nouvelleCouleur) {
                                 remplir_aux(x, y, ancienneCouleur, nouvelleCouleur);
                               }
                             }
                             void remplir_aux(int x, int y, int ancienneCouleur, int nouvelleCouleur) {
                               assertion(ancienneCouleur != nouvelleCouleur, "Tests couleurs");
                               if(!((0 <= x) && (x <= 31) && (0 <= y) && (y <= 31))) {
                                 return;
                               }
                               if(getPixel(x, y) != ancienneCouleur) {
                                 return;
                               }
                               setPixel(x, y, nouvelleCouleur);

                               remplir_aux(x - 1, y, ancienneCouleur, nouvelleCouleur);
                               remplir_aux(x, y - 1, ancienneCouleur, nouvelleCouleur);
                               remplir_aux(x + 1, y, ancienneCouleur, nouvelleCouleur);
                               remplir_aux(x, y + 1, ancienneCouleur, nouvelleCouleur);
                             }

                             // NE RIEN ECRIRE EN DESSOUS DE CETTE ZONE
                           }
                           );
}
