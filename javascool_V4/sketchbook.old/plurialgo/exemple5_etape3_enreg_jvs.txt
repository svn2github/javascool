
class Skieur {
	// proprietes
	String nom; 
	double [] notes = new double[10]; 
}

void saisir_Skieur(Skieur objet) { 
	int i1; 
	objet.nom = readString( "objet.nom : " ); 
	for(i1=0; i1<=5-1; i1=i1+1) {
		objet.notes[i1] = readDouble( "objet.notes[" + (i1) + "] : " ); 
	}
} 

double calculer_noteFinale(Skieur objet) { 
	int i1; 
	double som; 
	double mini; 
	double maxi; 
	double noteFinale; 
	som = 0; 
	mini = 1000; 
	maxi = -1000; 
	for(i1=0; i1<=4; i1=i1+1) {
		som = som + objet.notes[i1]; 
		if (objet.notes[i1] < mini) {
			mini = objet.notes[i1]; 
		}
		if (objet.notes[i1] > maxi) {
			maxi = objet.notes[i1]; 
		}
	}
	noteFinale = som - mini - maxi; 
	return noteFinale;
} 

void main() {
	int nbSkieur;  
	nbSkieur = readInt( "nbSkieur : " ); 
	Skieur [] objets = new Skieur[nbSkieur];
	int ii; 
	for(ii=0; ii<nbSkieur; ii++) {
		objets[ii] = new Skieur();
	}
	int k;
	for(k=1; k<=nbSkieur; k=k+1) {
		saisir_Skieur(objets[k-1]); 
	}
	// tri par note finale dÃ©croissante
	Skieur copie;	
	for(ii=1; ii<=nbSkieur-1; ii=ii+1) {
		for(k=ii+1; k<=nbSkieur; k=k+1) {
			if (calculer_noteFinale(objets[ii-1]) < calculer_noteFinale(objets[k-1])) {
				// on echange les 2 skieurs dans le tableau objets
				copie = objets[ii-1]; 
				objets[ii-1] = objets[k-1]; 
				objets[k-1] = copie; 
			}
		}
	}
	// affichage du classement (nom et note finale)
	double noteFinale;
	for(k=1; k<=nbSkieur; k=k+1) {
		println( "nom : " + objets[k-1].nom ); 
		noteFinale = calculer_noteFinale(objets[k-1]);  
		println( "noteFinale : " + noteFinale ); 
	}
} 
