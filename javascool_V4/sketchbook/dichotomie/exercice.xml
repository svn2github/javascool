<div class="sujet" title="Un tutoriel sur la recherche dichotomique">
  
  <div class="objectif">
    Le but de ce tutoriel est de comprendre la recherche dichotomique. 
  </div>
  
  <div class="intros">
    <div>Essayons de programmer la fonction : <div class="code">
      <p><r>int</r> getPage(<r>String</r> pays) {</p>
      <p>.. / ..</p>
      <p>}</p>
    </div>
    qui <i>renvoie le numéro de la page correspondant à un nom de pays donné, ou -1 si la page n'existe pas.</i>
    </div>
  </div>
  <div class="works">
    <div title="Tester toutes les valeurs">Essayer le programme suivant :
    <div class="code">
      <p><r>int</r> getPage(<r>String</r> pays) {</p>
      <p><T/>int debut = 0, fin = <r>length</r>();</p>
      <p><T/><r>while</r>(<r>true</r>) {</p>
      <p><T/><T/><r>int</r> c = <r>compare</r>(pays, debut);</p>
      <p><T/><T/><r>if</r> (c == 0) {</p>
      <p><T/><T/><T/><r>return</r> debut;</p>
      <p><T/><T/>} <r>else</r>{</p>
      <p><T/><T/><T/>debut = debut +1;</p>
      <p><T/><T/>}</p>
      <p><T/>}</p>
      <p>}</p>
    </div>
    avec un "<r>main</r>" en appelant <r>getPage</r> avec un nom de pays <i>qui existe</i> (<v>France</v>).
    <div>Noter que l'on utilise ici la construction <r>return</r> pour sortir de la boucle, tandis que <r>while(true)</r> est toujours vrai, donc boucle indéfiniment.</div>
    <div class="ul">
      <div>Quelle variable est utilisée et (provisoirement) inutile ici ?</div>
      <div>Que se passe t'il si le pays existe ? Utiliser la fonction<l class="note" link="1"/> <b><r>println</r>()</b> pour visualiser ce qui se passe à l'intérieur de la boucle.</div>
      <div>Que se passe t'il si le pays n'existe pas ? Que manque t'il pour qu'il fonctionne comme nous l'espérions ? </div>
    </div>Notez que cet algorithme est bien long car il faut essayer toutes les valeurs.</div>
    <div title="Couper le problème en deux : l'algorithme dichotomique">
      Voici une idée : On va couper l'espace de recherche en deux, puis en deux, puis en deux, etc. pour arriver à «cerner» la recherche, cela se formalise ainsi :
      <div class="ul">
        <div>définir une intervalle <c>{début, fin{</c> (la fin non incluse) où est la page recherchée<div class="ul">
        <div>de valeur initiale <c>{0, length(){</c> où <c>length()</c> est la taille du livre</div></div></div>
        <div>puis de comparer la page recherchée avec la page du milieu de cette intervalle<div class="ul">
        <div>et de réduire alors l'intervalle de moitié en remplaçant, selon, la borne de début ou de fin par le milieu</div></div></div>
        <div>jusqu'à ce que l'intervalle :<div class="ul">
        <div>soit de taille 1 : la page est alors trouvée</div>
        <div>ou de taille 0 : la page n'existe pas </div></div></div>
      </div>
      A vous de traduire cet algorithme du langage courant en langage informatique, en partant du code précédent !
    </div>
    <div title="Aller plus loin">Supposez que nous regardions l'annuaire téléphonique des 1048576 habitants des Alpes-Maritimes, triés par ordre alphabétique :<div class="ul">
       <div>Expliquez en 2/3 lignes comment utiliser une méthode dichotomique pour chercher une personne parmi plus d'un million de personnes !</div>
       <div>A l'aide de la suite des chiffres suivants, devinez en combien d'étapes la recherche dichotomique permet de trouver une personne parmi ce gros million :
         <div><c>0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576</c></div>
         Note : cette liste de chiffres sont les puissances de 2: 2^0, 2^1, 2^2, etc...
       </div>
       <div>A partir de la ligne de code :
       <div class="code">
         <p>n = n + 1; u = u * 2;  <r>echo</r>("2^" + n + "=" + u);</p>
       </div>écrire une boucle qui calcule les puissances de 2 de 0 à 20.</div>
     </div></div>
   </div>
   <div class="notes">
     <div id="1">La fonction <b><r>void</r> <c>println</c>(<r>String</r> string)</b> affiche une chaîne de caractères sur la console.</div>
   </div>
</div>
