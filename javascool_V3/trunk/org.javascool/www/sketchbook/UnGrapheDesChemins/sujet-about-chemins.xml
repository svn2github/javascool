<div class="sujet" title="Un tutoriel sur les graphes (2nde partie)"> 
  <div class="objectif">
    Le but est de s’approprier les différents éléments caractéristiques d’un graphe, 
    en vue de saisir les algorithmes qui en font usage, comme par exemple, l'algorithme du plus court chemin. 
    Si la première partie de ce tutoriel visait uniquement à introduire la notion de graphe avec un cas concret de parcours d'une voiture,
    on manipulera ici les notions clés et on élaborera les outils nécessaires pour la construction de l'algorithme du plus court chemin 
    avec cette fois le cas du graphe appliqué à un réseau d'amis qui entre eux possèdent ou non des liens de familiarité.
    Il faut déja savoir <l link="../../ingredients/doc-files/sujet-hello-world.htm" text="utiliser l'interface"/>,
    se servir de <l link="../../ingredients/doc-files/sujet-about-variables.htm" text="variables"/> 
    et avoir découvert l'<l link="../../ingredients/doc-files/sujet-about-if.htm" text="instruction conditionnelle"/> et 
    les <l link="../../ingredients/doc-files/sujet-about-while.htm" text="boucles"/>, 
    ansi que les <l link="../../ingredients/doc-files/sujet-about-functions.htm" text="fonctions"/>..
  </div>
  <div class="intros">
  	<p>Un graphe est un ensemble de points dont certaines paires sont directement reliées par un lien. 
  	Ces liens peuvent être orientés, d'un point vers un autre ou vice versa. Dans le cas contraire, les liens sont symétriques, et le graphe est non-orienté. 
  	Généralement, les points sont appelés les sommets ou les nœuds. Les liens sont appelés arêtes dans les graphes non-orienté 
        et arcs dans un graphe orienté.</p> 
       <p>Voir les notes d'<l link="http://javascool.gforge.inria.fr/v3/sketchbook/UnGrapheDesChemins/Introduction-aux-graphes.pdf" text="introduction aux graphes"/> pour permettre de comprendre le contexte historique.</p>
    <p>Un cas concret peut être un réseau d'amis où chaque sommet est une personne en particulier, 
  	et un lien entre deux personnes met en évidence leur familiarité.
    Ainsi, on peut se poser la question comment Alice peut entrer en relation avec Bob, et qui plus est de manière optimum,
        autrement dit en limitant le nombre de personnes intermédiaires.</p>
   </div>

  <div class="works">
    <div title="Avant de commencer">
	La première partie de ce tutoriel [METTRE UN LIEN (interface EnVoiture)] a été introductive à la notion de graphe, 
	partant d'un cas concret avec le parcours d'une voiture, de telle sorte à visiter des villes tout en limitant le chemin parcouru.
	Dans cette partie, on propose de programmer les concepts clés des graphes autour d'un réseau d'amis symbolisés par des noeuds pour les
	personnes et des liens entre les noeuds pour les liens de familiarité. 
    </div>
    <div title="Découverte de l'interface">
      Essayer les différentes fonctions de l'interface pour vous familiariser avant de . . le programmer: <div class="ul">
      <p>Pour avoir l'information sur toutes les fonctionnalités, passer la souris sur "info>>>".</p>
      <p>Pour une manipulation rapide, 'a' génère tous les noeuds disponibles, 'r' génère quelques liens.</p>
      <p>Pour lancer l'algotithme de calcul du plus court chemin entre 2 noeuds: clic gauche + 'b' pour le noeud de départ, clic gauche + 'e' pour le noeud d'arrivée.</p>
    </div></div>
    <div title="Construire son propre réseau">
      Utiliser les fonctions ci dessous pour définir à partir d'un petit bout de code votre propre réseau:<div class="ul">
        <p>Ajout d'un noeud: <p><r>UnGrapheDesChemins.addNode</r>(<r>String</r> n, <r>int</r> x, <r>int</r> y)</p></p>
        <p>Destruction d'un noeud: <p><r>UnGrapheDesChemins.removeNode</r>(<r>String</r> n)</p></p>
        <p>Ajout/modification d'un lien entre deux noeuds: <p><r>UnGrapheDesChemins.addLink</r>(<r>String</r> nA, <r>String</r> nB)</p></p>
        <p>Destruction d'un lien existant entre deux noeuds: <p><r>UnGrapheDesChemins.removeLink</r>(<r>String</r> nA, <r>String</r> nB)</p></p>
      </div>
    </div>
    <div title="Récupérer des informations du réseau">
      Utiliser les <l link="about-proglet.htm" text="fonctions"/> proposées 
      pour calculer le nombre de sommets et de liens, ainsi que la somme des poids des chemins.
    </div>
    <div title="Prémisse à un algorithme de plus court chemin">
      <p>Soit un graphe à 4 noeuds, avec un noeud de départ et un noeud d'arrivée (que vous aurez programmé à votre convenance).</p>
      <p>Depuis le noeud de départ, si le noeud est en lien avec le noeud d'arrivée, c'est fini; 
      sinon choisir le noeud dont le lien a le poids le plus faible.
      Si la boucle n'est pas fini, repartir du noeud précédent, et refaire le raisonnement.
      Continuer jusqu'à aboutir au noeud d'arrivée.</p>
      <div class="ul">
        <p>Programmer cet algorithme et regarder son exécution</p>
        <p>Prendre conscience que l'algorithme ainsi construit aboutit à la solution, mais est non-optimisé.<div class="ul">
          <p>On imprimera le nom des noeuds parcourus, ici des personnes, et on se rendra compte de la redondance des chemins.</p>
          <p>De plus, en ajoutant un noeud au graphe, on prendra conscience du temps de calcul exponentiel.</p>
      </div></p>
    </div></div>
    <div title="S'attaquer à un problème peut-être plus facile . . ">
      <p>On propose d'utiliser le graphe pour calculer le chemin entre deux personnes avec un <i>nombre minimum de personnes intermédiaires</i>.</p>
      <p>Ecrire au crayon l'ébauche de l'algorithme . . l'exploration des cas possibles est-elle plus simple dans ce cas ?</p>
      <p>Qu'en déduire alors ? </p>
    </div>
  </div>
</div>
