stdout: 
{p title = "Memorandum des constructions et instructions"
  {p title = "Adjectifs : type de données utilisées"
    {ul
      {li {r
          String
        }
        "Chaîne" de "caractères" "(ex:" {b {r
            String
          }
          nom "=" {s
            Bod
          }
          ";"
        }
        ")."
      }
      {li {r
          int
        }
        Entier positif ou "négatif," de environ "-2" "à" "+2" "milliards."
      }
      {li {r
          double
        }
        Nombre "décimal," comme sur une calculette "(ex:" {b {r
            double
          }
          pi "=" "3.1416;"
        }
        ")."
        {code {m
            Les nombres "décimaux" se notent avec un "." point et non une virgule "!"
          } {m
            Les nombres en notation scientifique "(par" exemple "6.023" "10"
            {sup
              "23"
            }
            ")" se note avec un e "(pour" "exposant)" ":" ici {c
              "6.023e23"
            }
          }
        }
      }
      {li {r
          boolean
        }
        Valeur vraie ou "fausse," "utilisée" dans les "tests."
      }
    }
  }
  {p title = "Verbes: fonctions utilisées"
    {p title = "Macros générales"
      {ul
        {li {b {r
              void
            } {c
              echo
            }
            "(" {r
              String
            }
            "string)"
          }
          Affiche une "chaîne" de "caractères" sur la console
          {footnote id = "1" }
          "."
        }
        {li {b {r
              boolean
            } {c
              equal
            }
            "(" {r
              String
            }
            "string1," {r
              String
            }
            "string2)"
          }
          Compare deux "chaînes" de "caratères" et renvoie {c
            true
          }
          si elles sont "égales."
        }
        {li {b {r
              double
            } {c
              pow
            }
            "(" {r
              double
            }
            "x," {r
              double
            }
            "y)"
          }
          Calcul {b
            x
          }
          "à" la puissance {b
            y
          }
          "(soit" {b
            x
            {sup
              y
            }
          }
          ")." Note ":" {r
            "Math.pow"
          }
          est synonyme de {r
            pow
          }
          "."
        }
        {li {b {r
              double
            } {c
              random
            }
            "()"
          }
          Renvoie un nombre "aléatoire" "uniformément" "distribué" entre "0" et "1." Note ":" {r
            "Math.random"
          }
          est synonyme de {r
            random
          }
          "."
        }
        {li {b {r
              int
            } {c
              random
            }
            "(" {r
              int
            }
            "min," {r
              int
            }
            "max)"
          }
          Renvoie un nombre "aléatoire" entier "uniformément" "distribué" entre le min et le max "(cette" valeur "incluse)."
        }
        {li {b {r
              void
            } {c
              sleep
            }
            "(" {r
              int
            }
            "duree)"
          }
          "Arrête" "l'exécution" du programme pendant une "durée" "fixée" "donnée" en "milli-secondes."
        }
      }
    }
    {p title = "Fonctions de la proglet Konsol"
      {ul
        {li {b {r
              void
            } {c
              clear
            }
            "()"
          }
          Efface tout le contenu la "fenêtre" de "sortie."
        }
        {li {b {r
              void
            } {c
              println
            }
            "(" {r
              String
            }
            "string)"
          }
          Ecrit une "chaînes" de "caratères" dans la "fenêtre" de "sortie."
        }
        {li {b {r
              String
            } {c
              readString
            }
            "()"
          }
          Lit une "chaîne" de "caratères" dans la "fenêtre" "d'entrée" "(ex:" {b {r
              String
            }
            nom "=" {r
              readString
            }
            "();"
          }
          ")."
        }
        {li {b {r
              int
            } {c
              readInteger
            }
            "()"
          }
          Lit un nombre entier dans la "fenêtre" "d'entrée" "(ex:" {b {r
              int
            }
            x "=" {r
              readInteger
            }
            "();"
          }
          ")."
        }
        {li {b {r
              double
            } {c
              readDouble
            }
            "()"
          }
          Lit un nombre "décimal" dans la "fenêtre" "d'entrée" "(ex:" {b {r
              double
            }
            x "=" {r
              readDouble
            }
            "();"
          }
          ")."
        }
        {li {b {r
              boolean
            } {c
              readBoolean
            }
            "()"
          }
          Lit une valeur vraie "(" {c
            "true," "vrai," "oui," "1"
          }
          ")" ou fausse "(" {c
            "false," "faux," "non," "0"
          }
          ")" dans la "fenêtre" "d'entrée."
        }
      }
      "(note:" {r
        readInt
      }
      est synonyme de {r
        readInteger
      }
      "," {r
        readFloat
      }
      est synonyme de {r
        readDouble
      }
      ")."
    }
    {p title = "Fonctions des autres proglets"
      Voir la description dans la documentation de chaque {a href = "about-all.htm#more"
        proglet
      }
      "."
    }
  }
  hr
  {p title = "Grammaire: constructions utilisées ici"
    {p title = "Bloc de séquences d'instructions"
      Un bloc se note entre {b
        "org.javascool.Pml"
      }
      et englobe un ensemble de "déclarations" et "d'instructions" "séparées" par un {b
        ";"
      }
      "."
    }
    {p title = "Opérateurs"
      {table border = "1"
        {tr
          {td
            {"org.javascool.Pml" c = "}" }
            {td
              Affectation "d'une" valeur "à" une variable "(ex:" {b x = "0;" }
              ")"
            }
          }
          {tr
            {td {c
                "||"
              } {c
                "&amp;&amp;"
              } {c
                "!"
              }
            }
            {td
              "Opérateur" logique "OU," ET et NON
            }
          }
          {tr
            {td
              {"org.javascool.Pml" c = "=" } {c "!" = "}" {c "&lt;" = "}" {c
                    "&lt;"
                  } {c "&gt;" = "}" {c
                      "&gt;"
                    }
                  }
                  {td
                    "Opérateur" "égalité," "différence" et comparaison "numérique"
                  }
                }
                {tr
                  {td {c
                      "+"
                    } {c
                      "-"
                    } {c
                      "*"
                    } {c
                      "/"
                    } {c
                      "%"
                    }
                  }
                  {td
                    "Addition," "soustraction," "multiplication," "division," reste "(appelé" aussi "modulo)."
                  }
                }
              }
            }
            {p title = "Instruction conditionnelle"
              Elle se note
              {p {b {r
                    if
                  }
                  "(expressionBooleenne)" "BlocD'InstructionsSiVrai" {r
                    else
                  }
                  "BlocD'InstructionsSiFaux"
                }
              }
              le {r
                else
              }
              et le bloc qui suit peut "être" omis "(voir" "l'activité" sur les {a href = "sujet-about-if.htm"
                instruction conditionnelle
              }
              pour plus de "détail)."
            }
            {p title = Boucle
              Elle se note
              {p {b {r
                    while
                  }
                  "(expressionBooleenne)" "BlocD'Instructions"
                }
              }
              "(voir" "l'activité" sur les {a href = "sujet-about-while.htm"
                boucles
              }
              pour plus de "détail)."
            }
            {p title = "Déclaration de fonction"
              Elle se note
              {p {r
                  TypeDuResultat
                } {b
                  NomDeLaFonction
                }
                "(" {r
                  TypeParametre1
                } {b
                  NomParametre1
                }
                "," "...," {r
                  TypeParametreN
                } {b
                  NomParametreN
                }
                ")" "BlocD'Instructions"
              }
              "(voir" "l'activité" sur les {a href = "sujet-about-functions.htm"
                fonctions
              }
              pour plus de "détail)."
            }
            {p title = "Programme principal"
              Il se note {b {r
                  void main
                }
                "org.javascool.Pml"
              }
              avec les instructions "définies" entre {b
                "org.javascool.Pml"
              }
              "."
            }
            tandis que le langage Java a beaucoup "d'autres" {a href = "http://www.eteks.com/coursjava/instructions.html"
              instructions et "opérateurs"
            }
            "."
          }
          {footnotes
            {p
              La "différence" entre {c
                echo
              }
              et {c
                println
              }
              est {c
                echo
              }
              affiche la "chaîne" de "caractères" dans la "console," donc marche avec toutes les "proglets," tandis que {c
                println
              }
              est "dédiée" "à" la "fenêtre" de sortie de la
              {proglet name = Konseol }
              "."
            }
          }
        }
      }
    }
  }
}
