stdout: 
{sujet
  {titre
    Un tutoriel sur les variables
  }
  {proglet name = Konsol }
  {objectif
    Le but de ce tutoriel est de comprendre comment utiliser des "variables." Il faut "déjà" savoir {a href = "sujet-hello-world.htm"
      utiliser "l'interface"
    }
    "."
  }
  {notes
    {note title = "Dialoguer avec un utilisateur"
      Voici un exemple de programme qui dialogue avec un utilisateur ":"
      {code
        {p {r
            void main
          }
          "()" "org.javascool.Pml"
          {p
            t {r
              println
            }
            "(" {s
              "Bonjour," quel est ton nom "?"
            }
            ");"
          }
          {p
            t {r
              String
            }
            texte "=" {r
              readString
            }
            "();"
          }
          {p
            t {r
              println
            }
            "(" {s
              "Enchanté"
            }
            "+" texte "+" {s
              "," et "..." "à" "bientôt" "!"
            }
            ");"
          }
          p
        }
      }
      Analysons ces quelques lignes ":"
      {ul
        {li
          Nous retrouvons le bloc {b {r
              void main
            }
            "()" ".."
          }
          qui permet de "spécifier" un bloc "d'instructions" "à" faire "exécuter," comme lors du {a href = "sujet-about-hello-world.htm"
            "1er" tutoriel
          }
          "."
        }
        {li
          Nous retrouvons un {r
            println
          }
          qui permet "d'imprimer" une ligne pour saluer "l'utilisateur."
        }
        {li
          Mais voici quelque chose de nouveau ":" il va entrer son {i
            nom
          }
          "." Or chaque utilisateur a un nom probablement "différent," il faut donc "prévoir" une boite "," une {i
            variable
          }
          "où" "mémoriser" le nom que "l'utilisateur" va entrer au "clavier."
          {ul
            {li
              Cette boite est une {i
                variable
              }
              "," nous lui avons "donné" le nom texte {i
                "(who_is_it," "c'est" "à" dire "qui est-ce" ")"
              }
              "," mais nous aurions pu choisir un autre nom "simple."
            }
            {li
              La {i
                valeur
              }
              de cette variable est une "chaîne" de "caractères," on parle de {r
                String
              }
              en anglais et "..." en javascool "."
            }
            {li
              La fonction {r
                "readString()"
              }
              lit un {r
                String
              }
              "."
            }
          }
          La ligne {b {r
              String
            }
            texte "=" {r
              readString
            }
            "();"
          }
          signifie "donc," de droite "à" "gauche,"
          {ol
            {li {b {r
                  "readString()"
                }
                ";"
              }
              Lire une chaine de "caratère" "..."
            }
            {li {b texte = {r
                 "readString()"
               }
                ";"
              }
              Et mettre le "résultat" dans la variable de nom {b
                texte
              }
              "..."
            }
            {li {b {r
                  String
                }
                texte "=" {r
                  "readString()"
                }
                ";"
              }
              Cette variable "étant" de type {r
                String
              }
              "," une chaine de "caratères" "donc."
            }
          }
          On voit donc ici que le symbole
          {"org.javascool.Pml" b = "}"
            signifie {i
              affecter une valeur "à" une variable
            }
            "(ici" affecter la valeur lue "grâce" "à" {r
              readString
            }
            "à" la variable {b
              texte
            }
            "."
          }
          {li
            La "dernière" ligne met bout "à" bout {s
              "Enchanté"
            }
            "," {b
              texte
            }
            "(dont" la valeur est le nom "entré" par "l'utilisateur)" et {s
              "," et "..." "à" "bientôt" "!"
            }
            pour imprimer un message de salutation "où" le nom de "l'utilisateur" est "employé."
          }
        }
      }
      {note title = "Trois couleurs pour trois sortes de mots"
        Regardons ces "lignes," il y a des mots en "ocre," en vert et en noir ":"
        {ul
          {li
            Les mots en ocre "(" {r
              String
            }
            "," {r
              println
            }
            "," "..)" sont les mots de base du langage et ceux des fonctions "prédéfinies." Ils sont "fixés" "à" "l'avance" "(ce" sont les mots du langage javascool ")," et doivent "être" "utilisés" tels "quels."  Chaque  mot  a  un  sens  "précis"  que  nous  "découvrons"  au  fur  et  "à"  "mesure."
          }
          {li
            Les mots en noir "(ici" {b
              texte
            }
            ")" sont les identificateurs de nos "variables," {i
              nous
            }
            les choisissons et nous donnons "à" ces variables des {i
              valeurs
            }
            "," un peu comme les x et les y en "mathématiques."
            {ul
              {li {i
                  Attention
                  {footnote id = "1" }
                  ":"
                }
                Les identificateurs en javascool sont uniquement "composés" de lettres minuscules sans accent et du signe _ "," par exemple vous pouvez "écrire" {c
                  leprenom
                }
                ou {c
                  le_prenom
                }
                mais PAS {c
                  "le-prenom"
                }
                "(on" ne peut utiliser le tiret "-" ")" ou {c
                  "leprénom"
                }
                "(on" ne peut utiliser "d'accent)."
              }
            }
          }
          {li
            Les mots en vert sont des chaines de "caractères," "constantes," que nous utilisons "telles quelles" "."
          }
        }
        Apprenons "à" bien distinguer ces trois sortes de "mots."
      }
      {note title = "Les verbes et les adjectifs du langage"
        Parmi les mots en ocre qui forment la base du "langage," nous "découvrons" "qu'ils" sont de deux sortes ":"
        {ol
          {li
            Les {b
              verbes
            }
            comme {r
              println
            }
            "(imprimer)" ou {r
              "readString()"
            }
            "(lire" un "``" {r
              String
            }
            "´´" "c'est" "à" dire une chaine de "caractères)" "désignent" des fonctions "à" "réaliser," certaines de ces actions retournent le "résultat" de leurs "opérations" "(par" exemple {r
              "readString()"
            }
            renvoie la chaine de "caractères" lue au "clavier)," "d'autres" font une action sans retourner de "résultat" "(par" exemple {r
              println
            }
            imprime une chaine de "caractères" et "voilà)." Nous "découvrirons" plus en "détail" ces {a href = "sujet-about-functions.htm"
              fonctions
            }
            ":" nous pourrons "même" "définir" {i
              nous "même"
            }
            de nouvelles "fonctions."
          }
          {li
            Les {b
              adjectifs
            }
            comme {r
              String
            }
            qui permet de "spécifier" que la variable {b
              texte
            }
            est une chaine de "caractères" "(et" pas un nombre ou un autre objet "numérique)." Il est bien "sûr" essentiel de bien "préciser" quel est le {i
              type
            }
            de chaque variable "grâce" "à" ces "adjectifs." Voici les premiers adjectifs que nous devons "connaître" ":"
            {ul
              {li {r
                  String
                }
                qui "désigne" les chaines de "caractères," nous les utilisons "déja" "!"
              }
              {li {r
                  int
                }
                qui "désigne" les nombres entiers "(" {c
                  int
                }
                est "l'abréviation" de "integer number" "´," nombre "entier)" positifs ou "négatifs" "(entre" environ "-2" millards et "2" "milliards," cela permet de manipuler de "très" grands nombres  entiers  "..."  mais  pas  "jusqu'à"  "l'infini"  "!)."
              }
              {li {r
                  double
                }
                qui "désigne" les nombres "décimaux" "(" {c
                  double
                }
                est "l'abréviation" de "double precision floating point number" "," nombres "décimaux" "à" double "précision)" comme sur une "calculette." Bien entendu ces nombres sont {i
                  approximatifs
                }
                ":" il y a "forcément" des erreurs "d'arrondis" lorsque "l'on" calcule "avec." A "l'inverse" les {r
                  int
                }
                permettent de faire des calculs exacts "(sauf" erreur de programmation "!)."
              }
              {li
                "..." ensuite chaque {i
                  objet "numérique"
                }
                "(texte," "image," liste de "valeurs," tableau de "chiffres," "..)" aura un {i
                  type
                }
                "," que nous "découvrirons" au fur et "à" "mesure," et nous "désignerons" tous les objets qui seront dans la "même" "classe," autrement dit qui auront le "même" "type," avec des adjectifs comme {r
                  String
                }
                "," {r
                  int
                }
                ou {r
                  double
                }
                "."
              }
            }
          }
        }
      }
    }
    {works
      {work title = "A nous de jouer"
        Taper sans se tromper les cinq lignes du "programme," puis essayer "(c'est" "à" "dire:" sauver
        {footnote id = "2" }
        "," compiler et "..." "exécuter)."
        {ul
          {li
            "Vérifier" que si "l'utilisateur" entre des noms "différents," alors le programme va bien stocker le nom dans la "variable," le "réutiliser" pour dire {s
              "Enchanté" ".."
            }
            "."
          }
          {li
            "Vérifier" que si nous changeons "l'identificateur" de la variable "(par" exemple remplacer {b
              texte
            }
            par {b
              son_nom
            }
            ")," cela ne change pas le fonctionnement du "programme."
          }
          {li
            Constatez bien que "l'" {i
              identificateur
            }
            "(le" nom de la variable "ici," {b
              texte
            }
            ")" "n'a" rien "à" voir avec la {i
              valeur
            }
            de la variable "(ici" le nom "entré" par "l'utilisateur)."
          }
          {li
            Modifier maintenant le programme "(la" forme de la "question," "l'utilisation" de la "réponse)" pour le rendre un peu "original," "à" vous de "jouer."
          }
        }
      }
      {work title = "Utilisons une variable numérique"
        Modifions un peu le programme en utilisant au bon endroit les trois lignes "supplémentaires" suivantes ":"
        {code
          {p
            t {r
              println
            }
            "(" {s
              "Enchanté"
            }
            "+" texte "+" {s
              "," quel est ton "âge" "?"
            }
            ");"
          }
          {p
            t {r
              int
            }
            age "=" {r
              "readInteger();"
            }
          }
          {p
            t {r
              println
            }
            "(" {s
              "Oh,"
            }
            "+" age "+" {s
              "," est un bel "âge" "!"
            }
            ");"
          }
        }
        {ul
          {li
            Essayer le code "modifié" et "vérifier" "qu'il" fonctionne de "manière" "satisfaisante."
          }
          {li
            Noter que maintenant nous avons une autre "variable," qui "n'est" plus de type {r
              String
            }
            mais de type "numérique."
          }
          {li
            Remplacer le {r
              int
            }
            par un {r
              double
            }
            "(c'est" "à" dire avec la ligne {b {r
                double
              }
              age "=" {r
                "readFloat()"
              }
              ";"
            }
            "," que constatons nous "?"
          }
          {li
            "L'âge" de "quelqu'un" "(son" nombre "d'années" de "vie)" est il "plutôt" un nombre entier "(un" {r
              int
            }
            ")" ou un nombre "décimal" "(un" {r
              double
            }
            ")" "?" "Ou," "mais," ".." sa taille en "mètre" "?" Et le "numéro" de sa classe au "collège" "?" Et sa note scolaire moyenne "?" Voyez comment selon la valeur "numérique" que "l'on" cherche "à"  "représenter"  "numériquement"  il  faut  utiliser  soit  un  {r
              int
            }
            soit un {r
              double
            }
            "."
          }
        }
      }
    }
    {footnotes
      {p title = "A propos des identificateurs"
        Selon les langages informatiques et les "règles" de codage les identificateurs peuvent "être" "composés" avec {i
          autre chose
        }
        que des lettres minuscules sans accent et du signe _ "(par" exemple on peut glisser des chiffres "après" "l'identificateur," mettre des "majuscules," "etc..)" mais ce "n'est" PAS une bonne habitude de le  "faire,"  car  cela  a  tendance  "à"  embrouiller  les  "choses,"  cela  "dépend"  des  "langages,"  "etc..."  En  programmation  il  faut  non  seulement  respecter  la  syntaxe  mais  aussi  choisir  de  bonnes  habitudes  pour  "spécifier"  ses  "programmes."
      }
      {p title = "Comment garder une trace du travail réalisé"
        Sauver le texte source du programme dans un fichier "d'extension" {c
          ".jvs"
        }
        "," par exemple {c
          "Var1.jvs"
        }
        "," puis {c
          "Var2.jvs"
        }
        pour la version "suivante," "etc.." De cette "façon" chaque version du travail "peut-être" "gardée," "corrigée," "etc.." De "plus," on peut facilement ajouter des {i
          lignes de commentaires
        }
        qui permettent de sauvegarder les "réponses" aux questions "posées." Ce sont des lignes qui commencent par {c
          "//"
        }
        et sont donc de la forme
        {code {m
            Voici deux lignes de commentaire "ignorée" par "l'ordinateur" "..."
          } {m
            "..." et qui permettent de donner des informations aux humains qui lisent ce code "!"
          }
        }
      }
    }
  }
}
