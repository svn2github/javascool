stdout: 
{sujet
  {titre
    Programmer quelques calculs "géométriques"
  }
  {proglet name = Scope }
  {objectif
    Le but de ce tutoriel est de programmer quelques calculs "géométriques." Il faut "déja" savoir {a href = "sujet-hello-world.htm"
      utiliser "l'interface"
    }
    "," se servir de {a href = "sujet-about-variables.htm"
      variables
    }
    et avoir "découvert" "l'" {a href = "sujet-about-if.htm"
      instruction conditionnelle
    }
    et "définir" une {a href = "sujet-about-functions.htm"
      fonction
    }
    "."
  }
  {notes
    {note
      {img src = "img/execute.png" }
      Choisir la proglet {c
        Scope
      }
      et non {c
        Konsol
      }
      dans le bouton "lié" "à" "l'exécution."
    }
    {note
      Lire en "détail" la description de la
      {proglet name = Scope }
      "."
    }
    {note title = "Un exemple: le calcul du centre de de deux points"
      "Considérons" le code "suivant:"
      {code
        {p {r
            void main
          }
          "()" "org.javascool.Pml" {m
            Lecture des valeurs du "réticule"
          }
          {p
            t {r
              double
            }
            x_A "=" "scopeX();"
          }
          {p
            t {r
              double
            }
            y_A "=" "scopeY();"
          } {m
            "Définition" "d'un" autre "point," avec des valeurs dans "[-1," "1]"
          }
          {p
            t {r
              double
            }
            x_B "=" "0.2;"
          }
          {p
            t {r
              double
            }
            y_B "=" "0.4;"
          } {m
            Calcul du milieu du segment
          }
          {p
            t {r
              double
            }
            x_I "=" "(x_A" "+" "x_B)" "/" "2;"
          }
          {p
            t {r
              double
            }
            y_I "=" "(y_A" "+" "y_B)" "/" "2;"
          } {m
            "Tracé" des points et des lignes correspondants
          }
          {p
            t {r
              scopeReset
            }
            "();"
          }
          {p
            t {r
              scopeAdd
            }
            "(x_A," "y_A," {s
              A
            }
            "," "4);"
          }
          {p
            t {r
              scopeAdd
            }
            "(x_I," "y_I," {s
              I
            }
            "," "2);"
          }
          {p
            t {r
              scopeAdd
            }
            "(x_B," "y_B," {s
              B
            }
            "," "4);"
          }
          {p
            t {r
              scopeAddLine
            }
            "(x_A," "y_A," "x_B," "y_B," "6);"
          }
          p
        }
      }
      Le programme principal {r
        main
      }
      ":"
      {ul
        {li
          lit dans {b
            x_A
          }
          et {b
            y_A
          }
          les valeurs horizontales et verticales du "réticule" du "scope."
        }
        {li
          fixe les valeurs {b
            x_B
          }
          et {b
            y_B
          }
          "à" des valeurs "constantes."
        }
        {li
          calcule le milieu de ces deux "points," puis
        }
        {li
          utilise les fonctions de la
          {proglet name = Scope }
          "pour:"
          {ul
            {li
              Effacer le "tracé"
            }
            {li
              Tracer les trois points {s
                A
              }
              "," {s
                I
              }
              et {s
                B
              }
              "."
            }
            {li
              Tracer le segment "(" {s
                A
              }
              "," {s
                B
              }
              ")."
            }
          }
        }
      }
    }
  }
  {works
    {work title = "Bien comprendre le code proposé"
      Pour "être" "sûr" que le code "proposé" est "clair," "répondre" aux questions "suivantes:"
      {ul
        {li
          Comment faudrait il modifier le code pour utiliser le point {s
            B
          }
          "=" {b
            "(0.5," "-0.5)"
          }
          "?"
        }
        {li
          Expliquer en une phrase comment se modifient les "coordonnées" de {b
            X
          }
          et {b
            Y
          }
          du point {s
            A
          }
          quand "on:"
          {ul
            {li
              Clique sur la "fenêtre" de "tracé" de la
              {proglet name = Scope }
              "."
            }
            {li
              Manipule les glissoirs en bas de la
              {proglet name = Scope }
              "."
            }
            {li
              Entre une valeur "numérique" au clavier en bas de la
              {proglet name = Scope }
              "."
            }
          }
        }
        {li
          Quel "paramètre" a permis de tracer les points en jaune et rouge et le segment en bleu "?"
        }
        {li
          Le programme principal {r
            main
          }
          "est," "certes," "exécuté" quand on clique sur le bouton {b
            Executer
          }
          mais "." "." comment se "fait-il" que le calcul se mette "à" jour quand on clique sur la "fenêtre" de "tracé" ou manipule les glissoirs "?" Expliquer en une ligne ce qui se passe dans la
          {proglet name = Scope }
          "."
        }
      }
    }
    {work title = "A vous de jouer: calculons le symétrique du point A par rapport au point B"
      Modifier le programme "précédent" pour calculer non plus milieu de "(" {s
        A
      }
      "," {s
        B
      }
      ")," mais le point {s
        S
      }
      "symétrique" de {s
        A
      }
      par rapport "à" {s
        B
      }
      et afficher le "résultat" avec le code "modifié."
    }
    {work title = "A vous de jouer: jouons avec un parallélogramme"
      En utilisant le code qui commence "ainsi:"
      {code
        {p {r
            void main
          }
          "()" "org.javascool.Pml" {m
            Lecture des valeurs du "réticule"
          }
          {p
            t {r
              double
            }
            x_A "=" "scopeX();"
          }
          {p
            t {r
              double
            }
            y_A "=" "scopeY();"
          } {m
            "Définition" de deux autres "points," avec des valeurs dans "[-1," "1]"
          }
          {p
            t {r
              double
            }
            x_B "=" "0.2;"
          }
          {p
            t {r
              double
            }
            y_B "=" "0.4;"
          }
          {p
            t {r
              double
            }
            x_C "=" "0.4;"
          }
          {p
            t {r
              double
            }
            y_C "=" "-0.6;"
          }
          {p
            "../.."
          }
        }
        "compléter" le "en:"
        {ul
          {li
            Calculant le milieu {s
              M
            }
            de "(" {s
              A
            }
            "," {s
              C
            }
            ")."
          }
          {li
            Calculant le point {s
              D
            }
            qui permette "à" {s
              A
            }
            "," {s
              B
            }
            "," {s
              C
            }
            "," {s
              D
            }
            "d'être" un "parallélogramme."
          }
          {li
            "Traçant" les "résultats" "obtenus."
          }
        }
      }
      {work title = "A vous de jouer: le triangle isocèle amovible"
        En utilisant le code qui commence "ainsi:"
        {code
          {p {r
              void main
            }
            "()" "org.javascool.Pml" {m
              Lecture des valeurs du "réticule"
            }
            {p
              t {r
                double
              }
              x_A "=" "scopeX();"
            }
            {p
              t {r
                double
              }
              y_A "=" "scopeY();"
            } {m
              "Définition" de deux autres "points," avec des valeurs dans "[-1," "1]"
            }
            {p
              t {r
                double
              }
              x_B "=" "0.2;"
            }
            {p
              t {r
                double
              }
              y_B "=" "0;"
            }
            {p
              "../.."
            }
          }
          "compléter" le "en:"
          {ul
            {li
              Calculant la projection {s
                P
              }
              de {s
                A
              }
              sur "l'axe" des "abscisses."
            }
            {li
              Calculant le point {s
                C
              }
              qui permette "à" {s
                A
              }
              "," {s
                B
              }
              "d'être" un triangle "isocèle" en {s
                A
              }
              "."
            }
            {li
              "Traçant" les "résultats" "obtenus."
            }
            {li
              Le calcul aurait il "été" aussi simple si {s
                B
              }
              "n'était" pas sur "l'axe" des abscisses "?" Commenter en une "ligne."
            }
          }
        }
        {work title = "A vous de jouer: tracé d'un cercle de diamètre AB"
          En reprenant le code initial "donné" comme premier "exemple," en plus du milieu {s
            I
          }
          de "(" {s
            A
          }
          "," {s
            B
          }
          "):"
          {ul
            {li
              Calculer la distance {b
                d
              }
              entre {s
                A
              }
              et {s
                B
              }
              en "utilisant," pas "exemple," les lignes de code "suivantes:"
              {code
                {p
                  t {r
                    double
                  }
                  d_x "=" x_B "-" "x_A;"
                }
                {p
                  t {r
                    double
                  }
                  d_y "=" y_B "-" "y_A;"
                }
              }
              et en utilisant la fonction {b {r
                  sqrt
                }
                "(x)"
              }
              qui renvoie la racine "carrée" de {b
                x
              }
              "(par" exemple {b {r
                  double
                }
                r "=" {r
                  sqrt
                }
                "(9);"
              }
              donne la valeur {b
                "3"
              }
              "à" {b
                r
              }
              ")."
            }
            {li
              Tracer alors le "``cercle´´" de centre {s
                I
              }
              et de "diamètre" {b
                AB
              }
              "."
            }
            {li
              Ce "n'est" pas une erreur "!" Ce cercle apparait comme un ovale "(plus" "précisément" une "ellipse)" sur le "tracé:" "savez-vous" pourquoi "?"
            }
          }
        }
      }
      {footnotes
        {p title = "Utiliser conjointement la proglet Scope et Konsol"
          On peut souhaiter utiliser conjointement les proglets
          {proglet name = Scope }
          et
          {proglet name = Konsol }
          pour combiner des "tracés" et des "entrées-sorties" au "clavier." En fait ce "n'est" pas "très" "recommandé," car "celà" risque de "sur-compliquer" les interfaces alors que le but ici est de se  concentrer  sur  "l'algorithmique."
          {p
            Mais "c'est" chose "aisée:" il suffit de "choisir," par exemple la proglet
            {proglet name = Scope }
            "," mais "d'ouvrir" en plus la proglet
            {proglet name = Konsol }
            en utilisant la "fonction:"
            {code {r
                show
              }
              "(" {s
                Konsol
              }
              ");"
            }
            qui va ouvrir la "2ème" "proglet."
          }
        }
      }
    }
  }
}
