stdout: 
{sujet
  {titre
    Comprendre quelques "opérations" de manipulation "d'images"
  }
  {proglet name = Smiley }
  {objectif
    Le but de ce tutoriel est de comprendre comment ce code manipule une image "pixellique." Il faut "déja" savoir {a href = "sujet-hello-world.htm"
      utiliser "l'interface"
    }
    "," se servir de {a href = "sujet-about-variables.htm"
      variables
    }
    et avoir "découvert" "l'" {a href = "sujet-about-if.htm"
      instruction conditionnelle
    }
    et utiliser des {a href = "sujet-about-while.htm"
      boucles
    }
    et "définir" une {a href = "sujet-about-functions.htm"
      fonction
    }
    "."
  }
  {notes
    {note
      {img src = "img/execute.png" }
      Choisir la proglet {c
        Smiley
      }
      et non {c
        Konsol
      }
      dans le bouton "lié" "à" "l'exécution."
    }
    {note
      Lire en "détail" la description de la
      {proglet name = Smiley }
      "."
    }
    {note p = "Comment est codée une image ?"
      Une image est un tableau "à" deux dimensions de points "lumineux," "c'est" "à" dire de "«pixels»." Chaque pixel a une valeur entre {c
        "0"
      }
      "(pour" le noir ")" et {c
        "255"
      }
      "(pour" le blanc ")." Bien lire le document sur "l'" {a href = "about-information.htm"
        information
      }
      en particulier la section "Décrire tous les dessins du monde" "."
    }
  }
  {works
    {work title = "Découvrir un code qui modifie chaque pixel de l'image"
      "Considérons" le code suivant ":"
      {code {m
          Fonction "appliquée" "à" chaque pixel
        }
        {p {r
            int
          }
          "f(" {r
            int
          }
          "x)" "org.javascool.Pml"
          {p
            t {r
              return
            }
            "255" "-" "x;"
          }
          p
        } {m
          Boucle sur tous les pixels
        }
        {p {r
            void
          }
          "filtre()" "org.javascool.Pml"
          {p
            t {r
              for
            }
            "(" {r
              int
            }
            j "=" "-" {r
              smileyHeight
            }
            "();" j "&lt;" "=" {r
              smileyHeight
            }
            "();" j "=" j "+" "1)" "org.javascool.Pml"
            {p
              t t {r
                for
              }
              "(" {r
                int
              }
              i "=" "-" {r
                smileyHeight
              }
              "();" i "&lt;" "=" {r
                smileyHeight
              }
              "();" i "=" i "+" "1)" "org.javascool.Pml"
              {p
                t t t {r
                  smileySet
                }
                "(i," "j," "f(" {r
                  smileyGet
                }
                "(i," "j)));"
              }
              {p
                t t
              }
            }
            {p
              t
            }
          }
          p
        }
        p
        {p {r
            void main
          }
          "()" "org.javascool.Pml"
          {p
            t {r
              smileyLoad
            }
            "(\"http://facets.inria.fr/javascool/doisneaubuffon.jpg\");"
          }
          p
        }
      }
      {ul
        {li
          Le programme principal {r
            main
          }
          charge une belle photo noir et blanc de {a href = "http://fr.wikipedia.org/wiki/Doisneau"
            Doisneau
          }
          "."
        }
        {li
          Les deux "premières" lignes de la fonction {b
            filtre
          }
          bouclent sur tous les pixels en vertical et en "horizontal."
        }
        {li
          Expliquez en quelques mots le "rôle" des variables {b
            i
          }
          et {b
            j
          }
          "."
        }
        {li
          Que fait la construction {b {r
              smileySet
            }
            "(i," "j," "f(" {r
              smileyGet
            }
            "(i," "j)));"
          }
          pour un pixel de "coordonnée" "(" {b
            "i," j
          }
          ")" "?."
        }
        {li
          Essayez ce "code," puis le code en ajoutant la fonction {b
            "filtre();"
          }
          "après" {b {r
              smileyLoad
            }
            "()"
          }
          dans le programme principal ":" que se passe "t'il" "?"
        }
        {li
          Expliquez en quelques mots ce "phénomène" "d'«inversion" "vidéo»."
        }
        {li
          A la place de la construction {b {r
              return
            }
            "255" "-" "x;"
          }
          "," mettre la construction {b {r
              return
            }
            "x;"
          }
          ":" que se passe "t'il" et pourquoi "?"
        }
        {li
          Augmenter ou baisser la {i
            "luminosité"
          }
          "d'une" image revient "à" ajouter ou soustraire une valeur constante "à" la valeur de chaque pixel ":" essayez en modifiant la fonction {b
            "f()"
          }
          "."
        }
        {li
          Que se passe "t'il" si on choisit {b {r
              return
            }
            x "+" "255;"
          }
          et pourquoi "?."
        }
        {li
          Que se passe "t'il" si on choisit {b {r
              return
            }
            x "-" "255;"
          }
          et pourquoi "?."
        }
        {li
          Augmenter ou baisser le {i
            contraste
          }
          "d'une" image revient "à" multiplier ou diviser par un gain constant la valeur de chaque pixel ":" essayez en modifiant la fonction {b
            "f()"
          }
          "."
        }
        {li
          Que se passe "t'il" si on choisit {b {r
              return
            }
            "0" "*" "x;"
          }
          et pourquoi "?."
        }
        {li
          Que se passe "t'il" si on choisit {b {r
              return
            }
            "100" "*" x "-" "128;"
          }
          et pourquoi "?."
        }
      }
    }
    {work title = "Ajouter deux images : l'effet de calque"
      Cette partie se fera sans rien "programmer." "Considérons" les deux images issues "d'une" "célèbre" {a href = "http://www.ri.cmu.edu/publication_view.html?pub_id=3904"
        base de "donnée"
      }
      "," mise "à" disposition de la "communauté" scientifique internationale pour "étudier" les logiciels de traitement des "séquences" "d'images" contenant des mouvements "humains."
      {ul
        {li
          Si "l'on" "considère" les deux images "suivantes:"
          {p align = center
            {table
              {tr
                {td
                  {img src = "img/cmu-jump1.jpg" } }
                {td
                  {img src = "img/cmu-jump3.jpg" } } } } }
          que se passera "t'il" si on "``additionne´´" ces deux images "?" "C'est" "à" dire si "l'on" construit une nouvelle image dont la valeur de chaque pixel est la somme des valeurs des pixels de chaque image  "?"  Expliquer  en  une  "phrase."
        }
        {li
          Si chaque image "était" "dessinée" sur une feuille de papier "calque," "à" quoi correspondrait la valeur "``transparente´´" par rapport "à" la couleur de ces images "?"
        }
        {li
          Quelle est la "différence" entre poser une image "dessinée" sur un calque et ajouter la valeur des pixels comme "proposé" ici "?"
        }
        {li
          Ecrire en langage naturel "(avec" vos mots "à" "vous," sans vous soucier de le "programmer)" un algorithme qui simule le fait de poser une image "dessinée" sur un calque sur une "autre."
        }
      }
    }
    {work title = "Soustraire deux images : détecter des changements"
      Cette partie se fera sans rien "programmer," comme la "précédente."
      {ul
        {li
          Si "l'on" "considère" les deux images suivantes "(cliquer" sur "l'image" de gauche pour visualiser la "séquence):"
          {p align = center
            {table
              {tr
                {td {a href = "img/13_11.avi"
                    {img src = "img/cmu-jump1.jpg" } } }
                {td
                  {img src = "img/cmu-jump2.jpg" } } } } }
          que "s'est" il "passé" entre les deux images "?" Si "l'on" "``soustrait´´" les deux images de "manière" similaire "à" ce qui a "été" fait pour les "``additionner´´" que va "t'il" se "passer," pour les  pixels  correspondants  "à"  des  points  immobiles  entre  les  deux  images  "?"  Et  les  pixels  correspondants  "à"  des  points  en  mouvement  "?"  Expliquer  en  "deux/trois"  "phrases."
        }
        {li
          A quoi correspondent les valeurs positives si "l'on" soustrait les pixels de "l'image" de gauche "à" ceux de "l'image" de droite "?" Et les valeurs "négatives" "?"
        }
        {li
          Utiliser "l'idée" de soustraire deux images pour "décrire" en quelques lignes un "système" qui permette de "détecter" les mouvements "d'un" objet avec une "caméra."
        }
      }
    }
    {work title = "Découvrir un code qui filtre les pixels de l'image"
      "Considérons" le code suivant ":"
      {code {m
          Fonction "appliquée" "à" chaque pixel
        }
        {p {r
            void
          }
          "filtrePixel(" {r
            int
          }
          "i," {r
            int
          }
          "j)" "org.javascool.Pml"
          {p
            t {r
              int
            }
            valeur "=" "(" {r
              smileyGet
            }
            "(i," "j)" "+" {r
              smileyGet
            }
            "(i" "+" "1," "j)+" {r
              smileyGet
            }
            "(i," j "+" "1)+" {r
              smileyGet
            }
            "(i" "-" "1," "j)+" {r
              smileyGet
            }
            "(i," j "-" "1))" "/" "5;"
          }
          {p
            t {r
              smileySet
            }
            "(i," "j," "valeur);"
          }
          p
        } {m
          Boucle sur tous les pixels
        }
        {p {r
            void
          }
          "filtre()" "org.javascool.Pml"
          {p
            t {r
              for
            }
            "(" {r
              int
            }
            j "=" "-" {r
              smileyHeight
            }
            "()" "+" "1;" j "&lt;" "=" {r
              smileyHeight
            }
            "()" "-" "1;" j "=" j "+" "1)" "org.javascool.Pml"
            {p
              t t {r
                for
              }
              "(" {r
                int
              }
              i "=" "-" {r
                smileyHeight
              }
              "()" "+" "1;" i "&lt;" "=" {r
                smileyHeight
              }
              "()" "-" "1;" i "=" i "+" "1)" "org.javascool.Pml"
              {p
                t t t "filtrePixel(i," "j);"
              }
              {p
                t t
              }
            }
            {p
              t
            }
          }
          p
        }
        p
        {p {r
            void main
          }
          "()" "org.javascool.Pml"
          {p
            t {r
              smileyLoad
            }
            "(\"http://facets.inria.fr/javascool/doisneaubuffon.jpg\");"
          }
          {p
            t {r
              for
            }
            "(" {r
              int
            }
            n "=" "0;" n "&lt;" "2;" n "=" n "+" "1)" "org.javascool.Pml"
            {p
              t t "filtre();"
            }
            {p
              t
            }
          }
          p
        }
      }
      {ul
        {li
          Le programme principal {r
            main
          }
          charge la photo et appelle la nouvelle fonction {b
            filtre
          }
          deux fois de suite "(pour" {b n = "0" }
          et {b n = "1" }
          ")."
        }
        {li
          La nouvelle fonction {b
            filtre
          }
          appelle la fonction {b
            filtrePixel
          }
          sur chaque "pixel."
        }
        {li
          Expliquez ce que fait cette fonction {b
            filtrePixel
          }
          ":" entre quelles "5" valeurs calcule "t'elle" la moyenne "(faire" un "dessin)" "?"
        }
        {li
          Essayez le code ":" que se passe "t'il" visuellement "?" Pourquoi ce filtre a "t'il" un tel effet "?"
        }
        {li
          Essayez le code en appliquant non pas le filtre {c
            "2"
          }
          mais {c
            "10"
          }
          "fois," puis {c
            "10"
          }
          "fois," dans le programme principal ":" que se passe "t'il" "?"
        }
        {li
          Essayez aussi avec "d'autres" images de votre choix vues sur "internet."
        }
      }
    }
    {work title = "D'autres filtres d'images"
      "Considérons" le code "suivant," avec une autre fonction de filtre ":"
      {code {m
          Fonction "appliquée" "à" chaque pixel
        }
        {p {r
            void
          }
          "filtrePixel(" {r
            int
          }
          "i," {r
            int
          }
          "j)" "org.javascool.Pml"
          {p
            t {r
              int
            }
            valeur "=" "128" "+" "(" {r
              smileyGet
            }
            "(i," "j)" "-" {r
              smileyGet
            }
            "(i" "+" "1," "j));"
          }
          {p
            t {r
              smileySet
            }
            "(i," "j," "valeur);"
          }
          p
        } {m
          Boucle sur tous les pixels
        }
        {p {r
            void
          }
          "filtre()" "org.javascool.Pml"
          {p
            t {r
              for
            }
            "(" {r
              int
            }
            j "=" "-" {r
              smileyHeight
            }
            "()" "+" "1;" j "&lt;" "=" {r
              smileyHeight
            }
            "()" "-" "1;" j "=" j "+" "1)" "org.javascool.Pml"
            {p
              t t {r
                for
              }
              "(" {r
                int
              }
              i "=" "-" {r
                smileyHeight
              }
              "()" "+" "1;" i "&lt;" "=" {r
                smileyHeight
              }
              "()" "-" "1;" i "=" i "+" "1)" "org.javascool.Pml"
              {p
                t t t "filtrePixel(i," "j);"
              }
              {p
                t t
              }
            }
            {p
              t
            }
          }
          p
        }
        p
        {p {r
            void main
          }
          "()" "org.javascool.Pml"
          {p
            t {r
              smileyLoad
            }
            "(\"http://facets.inria.fr/javascool/doisneaubuffon.jpg\");"
          }
          {p
            t "filtre();"
          }
          p
        }
      }
      {ul
        {li
          Que se passe "t'il" dans ce cas "?" "Décrivez" ce que vous "observez."
        }
        {li
          Pourquoi avoir "ajouté" {c
            "128"
          }
          "?" Essayez avec les expressions {b valeur = "(" {r
              smileyGet
            }
            "(i," "j)" "-" {r
              smileyGet
            }
            "(i" "+" "1," "j));"
          }
          puis {b valeur = "-(" {r
              smileyGet
            }
            "(i," "j)" "-" {r
              smileyGet
            }
            "(i" "+" "1," "j));"
          }
          pour bien comprendre ce qui se "passe."
        }
        {li
          Comment observer la "même" chose avec les contours horizontaux "?" Proposez une nouvelle fonction pour ce "faire."
        }
        {li
          Essayez la construction {b valeur = "(" {r
              smileyGet
            }
            "(i," "j)" "-" {r
              smileyGet
            }
            "(i" "+" "1," "j)" "-" {r
              smileyGet
            }
            "(i," j "+" "1));"
          }
          et commentez le "résultat."
        }
        {li
          Deux questions "très" "subtiles," pour les "«cracks»" ":"
          {ul
            {li
              Avez vous "remarqué" que la boucle de la fonction {b
                "filtre()"
              }
              "n'a" pas les "mêmes" bornes "d'itération" pour ces filtres que lors du "1er" cas "où" on tranformait juste "l'intensité" "d'un" pixel "?" "Sauriez-vous" dire pourqoi "?"
            }
            {li
              Que se "passerait-il" si on utilisait {b valeur = "128"
                "+" "(" {r
                  smileyGet
                }
                "(i," "j)" "-" {r
                  smileyGet
                }
                "(i" "-" "1," "j));"
              }
              ":" essayez et tentez "d'expliquer" "pourquoi."
            }
          }
        }
      }
    }
  }
  {footnotes
    {p title = "Manipuler des objets numériques: l'exemple des images."
      Le but de cette "activité" "est," maintenant que nous {a href = "http://interstices.info/reflet-numerique"
        savons comment sont "codées" des images
      }
      "," de regarder quelques "opérations" que nous pouvons effectuer sur ces objets "numériques." Nous "considérons" ici des images "où" chaque pixel est un nombre entre "0%" pour le noir "(considéré" ici  comme  une  absence  de  "couleur)"  et  "100%"  pour  le  "blanc,"  donc  des  images  monochromes  qui  vont  de  transparent  "à"  "blanc."  Nous  allons  essayer  "d'illustrer"  dans  quelle  mesure  des  "opérations"  entre  ces  images  peuvent  prendre  avoir  un  sens  concret  pour  "nous."
    }
    {p title = "Ajouter deux images: l'effet de calque"
      "." Que peux signifier ajouter deux images "?" Tout simplement produire un effet de calque comme on le voit avec "l'exemple" "ci-dessus." En ajoutant les deux "images," "c'est" "à" dire en ajoutant les  valeurs  de  chaque  pixel  de  la  "première"  image  "à"  la  valeur  du  pixel  correspondant  dans  la  seconde  "image,"  on  obtient  une  image  qui  amalgame  les  valeurs  des  "deux,"  un  peu  comme  un  effet  de  "calque."  Si  nous  avions  "considéré"  des  pixels  de  couleurs  alors  en  les  ajoutant  nous  aurions  "mélangé"  les  couleurs  et  obtenues  des  combinaisons  "diverses."  De  "plus,"  la  notion  de  calque  est  "lié"  au  fait  que  nous  avons  "considéré"  la  notion  de  "transparence:"  il  "s'agit"  juste  ici  "d'illustrer"  un  "principe."
    }
    {p title = "Soustraire deux images: un détecteur de mouvement."
      A quoi peut correspondre maintenant la soustraction de deux "images," "c'est" "à" dire soustraire "à" chaque pixel de la "première" "image," la valeur du pixel correspondant de la seconde "?" Il est facile  de  voir  que  si  les  pixels  ont  une  "même"  "valeur,"  alors  la  "différence"  sera  "nulle:"  ainsi  si  rien  "n'a"  "changé"  "d'une"  image  "à"  "l'autre,"  il  "n'y"  aura  pas  de  "différence."  Si  au  "contraire,"  quelque  chose  a  "changé,"  alors  la  "différence"  sera  ou  positive  "(disons"  "plutôt"  "noire)"  ou  "négative"  "(disons"  "plutôt"  "blanche)"  et  nous  "détectons"  ainsi  les  "changements,"  comme  nous  le  voyons  ci  dessus  pour  deux  images  entre  lesquelles  la  figurine  a  quelque  peu  "bougé."  Dans  le  cas  "d'un"  "film,"  nous  obtenons  une  "image de mouvement"  ":"  la  "détection"  de  ce  qui  bouge  "d'une"  image  "à"  "l'autre."  Ce  qui  est  "très"  "intéressant"  "c'est"  que  dans  les  "rétines"  biologiques  ou  dans  les  "systèmes"  de  vision  artificiels  qui  analysent  les  "mouvements,"  "c'est"  un  calcul  tout  "à"  fait  similaire  qui  est  mis  en  "oeuvre."
    }
    {p title = "Manipuler les valeurs des pixels: réglage de contraste et de luminosité, etc.."
      Regardons maintenant quelques "opérations" "effectuées" sur chaque valeur des pixels "d'une" "image."
      {ul
        {li
          Par "exemple," prenons chaque pixel de "l'image" et "décalons" chaque valeur "d'une" "quantité" "constante," par exemple en ajoutant un nombre "donné." Que se passe "t'il" "?" Les valeurs sombres  deviennent  plus  "claires,"  nous  avons  "augmenté"  la  "luminosité"  de  notre  "image."  "C'est"  exactement  ce  qui  se  passe  sur  le  "réglage"  de  "luminosité"  "d'un"  "écran:"  il  "s'agit"  "d'ajouter"  ou  retirer  une  valeur  constante  pour  donner  plus  ou  moins  de  "lumière."
        }
        {li
          Prenons maintenant chaque pixel et multiplions sa valeur par une "quantité" "donnée," disons plus grande que "un." Que se passe "t'il" "?" Nous augmentons les amplitudes entre valeurs sombres et  "claires,"  nous  avons  "augmenté"  le  contraste  de  notre  "image."  "C'est"  exactement  ce  qui  se  passe  sur  le  "réglage"  de  contraste  "d'un"  "écran:"  il  "s'agit"  soit  "d'amplifier"  les  "écarts"  entre  les  valeurs  donc  favoriser  les  noirs  et  les  blancs  au  "détriment"  des  "gris,"  soit  de  diminuer  ces  "écarts"  "(en"  multipliant  toutes  les  valeurs  par  un  nombre  plus  petit  que  "un)"  donc  de  rapprocher  toutes  les  couleurs  du  "gris."
        }
      }
      Beaucoup "d'autres" "opérations" sur la valeur des pixels peuvent facilement se "prédire:" par exemple que se passe "t'il" si nous prenons "l'opposé" de chaque valeur de pixel "?" Les noirs deviennent  blancs  et  les  blancs  deviennent  noir  et  nous  avons  une  "opération"  dites  "d'``inverse"  "vidéo´´."
    }
    {p title = "Les images comme des objets algébriques:"
      Les "mathématiciens" voient donc "sûrement" ces tableaux "bi-dimensionnels" que sont les images comme des objets "algébriques" que "l'on" peut ajouter "(effet" de "calque)," multiplier par un  "scalaire,"  translater  "etc..."  Ce  sont  effectivement  des  vecteurs  "d'un"  espace  vectoriel  dont  les  composantes  sont  "rangées"  en  "tableau."  Ce  ne  sont  pas  des  matrices  car  multiplier  deux  images  "(au"  sens  de  la  multiplication  des  matrices  des  valeurs  de  "pixels)"  correspond  "à"  une  "opération"  qui  "n'a"  pas  de  sens  "(hormis"  pour  un  artiste  "surréaliste"  "!)"  en  ce  qui  concerne  les  "images."  Nous  sommes  donc  face  "à"  des  objets  "algébriques"  "dotées"  "d'opérations"  riches  de  "propriétés,"  mais  "différents"  des  objets  usuels  de  "l'algèbre"  "linéaire."  Les  "théoriciens"  de  la  vision  par  ordinateur  ont  largement  "explorés"  ces  aspects  "formels."
    }
  }
}
