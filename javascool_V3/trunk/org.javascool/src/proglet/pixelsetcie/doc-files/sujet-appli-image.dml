<div class="sujet" title="Comprendre quelques opérations de manipulation d'images">
  

  
  
  <div class="objectif">
    Le but de ce tutoriel est de comprendre comment ce code manipule une image pixellique. 
    Il faut déja savoir <l link="sujet-hello-world.htm"/>,
    se servir de <l link="sujet-about-variables.htm"/> et avoir découvert l'<l link="sujet-about-if.htm"/> et 
    utiliser des <l link="sujet-about-while.htm"/> et définir une <l link="sujet-about-functions.htm"/>.
  </div>
  
  <div class="intros">
    <div><l class="icon" icon="img/execute.png"/> Choisir la proglet <c>Smiley</c> et non <c>Konsol</c> dans le bouton lié à l'exécution.</div>
     <div>Lire en détail la description de la .</div>
     <div>
       Une image est un tableau à deux dimensions de points lumineux, c'est à dire de «pixels». 
       Chaque pixel a une valeur entre <c>0</c> (pour le "noir") et <c>255</c> (pour le "blanc").
       Bien lire le document sur l'<l link="about-information.htm"/> en particulier la section "Décrire tous les dessins du monde".
     </div>
  </div>
  <div class="works">
    <div title="Découvrir un code qui modifie chaque pixel de l'image">
      Considérons le code suivant : <div class="code">
        <m>Fonction appliquée à chaque pixel</m>
        <p><r>int</r> f(<r>int</r> x) {</p>
        <p><T/><r>return</r> 255 - x;</p>
        <p>}</p>
        <m>Boucle sur tous les pixels</m>
        <p><r>void</r> filtre() {</p>
        <p><T/><r>for</r>(<r>int</r> j = -<r>smileyHeight</r>(); j &lt;= <r>smileyHeight</r>(); j = j + 1) {</p>
        <p><T/><T/><r>for</r>(<r>int</r> i = -<r>smileyHeight</r>(); i &lt;= <r>smileyHeight</r>(); i = i + 1) {</p>
        <p><T/><T/><T/><r>smileySet</r>(i, j, f(<r>smileyGet</r>(i, j)));</p>
        <p><T/><T/>}</p>
        <p><T/>}</p>
        <p>}</p>
        <p/>
        <p><r>void main</r>() {</p>
        <p><T/><r>smileyLoad</r>("http://facets.inria.fr/javascool/doisneaubuffon.jpg");</p>
        <p>}</p>
      </div><div class="ul">
        <div>Le programme principal <r>main</r> charge une belle photo noir et blanc de <l link="http://fr.wikipedia.org/wiki/Doisneau"/>.</div>
        <div>Les deux premières lignes de la fonction <b>filtre</b> bouclent sur tous les pixels en vertical et en horizontal.</div>
        <div>Expliquez en quelques mots le rôle des variables <b>i</b> et <b>j</b>.</div>
        <div>Que fait la construction <b><r>smileySet</r>(i, j, f(<r>smileyGet</r>(i, j)));</b> pour un pixel de coordonnée (<b>i, j</b>) ?.</div>
        <div>Essayez ce code, puis le code en ajoutant la fonction <b>filtre();</b> après <b><r>smileyLoad</r>()</b> dans le programme principal : que se passe t'il ?</div>
        <div>Expliquez en quelques mots ce phénomène d'«inversion vidéo».</div>
        <div>A la place de la construction <b><r>return</r> 255 - x;</b>, mettre la construction <b><r>return</r>x;</b>: que se passe t'il et pourquoi ?</div>
        <div>Augmenter ou baisser la <i>luminosité</i> d'une image revient à ajouter ou soustraire une valeur constante à la valeur de chaque pixel : 
        essayez en modifiant la fonction <b>f()</b>.</div>
        <div>Que se passe t'il si on choisit <b><r>return</r> x + 255;</b> et pourquoi ?.</div>
        <div>Que se passe t'il si on choisit <b><r>return</r> x - 255;</b> et pourquoi ?.</div>
        <div>Augmenter ou baisser le <i>contraste</i> d'une image revient à multiplier ou diviser par un gain constant la valeur de chaque pixel : 
        essayez en modifiant la fonction <b>f()</b>.</div>
        <div>Que se passe t'il si on choisit <b><r>return</r> 0 * x;</b> et pourquoi ?.</div>
        <div>Que se passe t'il si on choisit <b><r>return</r> 100 * x - 128;</b> et pourquoi ?.</div>
      </div>
    </div>
    <div title="Ajouter deux images : l'effet de calque"> 
      Cette partie se fera sans rien programmer. 
      Considérons les deux images issues d'une célèbre <l link="http://www.ri.cmu.edu/publication_view.html?pub_id=3904"/>,
      mise à disposition de la communauté scientifique internationale pour étudier les logiciels de traitement des séquences d'images contenant des mouvements humains.<div class="ul">
        <div>Si l'on considère les deux images suivantes:
        <div class="center"><div class="table"><div><div><l class="icon" icon="img/cmu-jump1.jpg"/></div><div><l class="icon" icon="img/cmu-jump3.jpg"/></div></div></div></div>
        que se passera t'il si on ``additionne´´ ces deux images ? 
        C'est à dire si l'on construit une nouvelle image dont la valeur de chaque pixel est la somme des valeurs des pixels de chaque image ? Expliquer en une phrase.</div>
        <div>Si chaque image était dessinée sur une feuille de papier calque, à quoi correspondrait la valeur ``transparente´´ par rapport à la couleur de ces images ?</div>
        <div>Quelle est la différence entre poser une image dessinée sur un calque et ajouter la valeur des pixels comme proposé ici ?</div>
        <div>Ecrire en langage naturel (avec vos mots à vous, sans vous soucier de le programmer) un algorithme qui simule le fait de poser une image dessinée sur un calque sur une autre.</div>
      </div>
    </div>
    <div title="Soustraire deux images : détecter des changements">
      Cette partie se fera sans rien programmer, comme la précédente. <div class="ul">
        <div>Si l'on considère les deux images suivantes (cliquer sur l'image de gauche pour visualiser la séquence):
        <div class="center"><div class="table"><div><div><l link="img/13_11.avi" icon="img/cmu-jump1.jpg"/></div><div><l class="icon" icon="img/cmu-jump2.jpg"/></div></div></div></div>
        que s'est il passé entre les deux images ? Si l'on ``soustrait´´ les deux images de manière similaire à ce qui a été fait pour les ``additionner´´ que va t'il se passer,
        pour les pixels correspondants à des points immobiles entre les deux images ? Et les pixels correspondants à des points en mouvement ? 
        Expliquer en deux/trois phrases.</div>
        <div>A quoi correspondent les valeurs positives si l'on soustrait les pixels de l'image de gauche à ceux de l'image de droite ? Et les valeurs négatives ?</div>
        <div>Utiliser l'idée de soustraire deux images pour décrire en quelques lignes un système qui permette de détecter les mouvements d'un objet avec une caméra.</div>
      </div>
    </div>
    <div title="Découvrir un code qui filtre les pixels de l'image">
      Considérons le code suivant : <div class="code">
        <m>Fonction appliquée à chaque pixel</m>
        <p><r>void</r> filtrePixel(<r>int</r> i, <r>int</r> j) {</p>
        <p><T/><r>int</r> valeur = (<r>smileyGet</r>(i, j) + <r>smileyGet</r>(i + 1, j)+ <r>smileyGet</r>(i, j + 1)+ <r>smileyGet</r>(i - 1, j)+ <r>smileyGet</r>(i, j - 1)) / 5;</p>
        <p><T/><r>smileySet</r>(i, j, valeur);</p>
        <p>}</p>
        <m>Boucle sur tous les pixels</m>
        <p><r>void</r> filtre() {</p>
        <p><T/><r>for</r>(<r>int</r> j = -<r>smileyHeight</r>() + 1; j &lt;= <r>smileyHeight</r>() - 1; j = j + 1) {</p>
        <p><T/><T/><r>for</r>(<r>int</r> i = -<r>smileyHeight</r>() + 1; i &lt;= <r>smileyHeight</r>() - 1; i = i + 1) {</p>
        <p><T/><T/><T/>filtrePixel(i, j);</p>
        <p><T/><T/>}</p>
        <p><T/>}</p>
        <p>}</p>
        <p/>
        <p><r>void main</r>() {</p>
        <p><T/><r>smileyLoad</r>("http://facets.inria.fr/javascool/doisneaubuffon.jpg");</p>
        <p><T/><r>for</r>(<r>int</r> n = 0; n &lt; 2; n = n + 1) {</p>
        <p><T/><T/>filtre();</p>
        <p><T/>}</p>
        <p>}</p>
      </div><div class="ul">
        <div>Le programme principal <r>main</r> charge la photo et appelle la nouvelle fonction <b>filtre</b> deux fois de suite (pour <b>n = 0</b> et <b>n = 1</b>).</div>
        <div>La nouvelle fonction <b>filtre</b> appelle la fonction <b>filtrePixel</b> sur chaque pixel.</div>
        <div>Expliquez ce que fait cette fonction <b>filtrePixel</b> : entre quelles 5 valeurs calcule t'elle la moyenne (faire un dessin) ?</div>
        <div>Essayez le code : que se passe t'il visuellement ? Pourquoi ce filtre a t'il un tel effet ?</div>
        <div>Essayez le code en appliquant non pas le filtre <c>2</c> mais <c>10</c> fois, puis  <c>10</c> fois, dans le programme principal : que se passe t'il ?</div>
        <div>Essayez aussi avec d'autres images de votre choix vues sur internet.</div>
      </div>
    </div>
    <div title="D'autres filtres d'images">
      Considérons le code suivant, avec une autre fonction de filtre : <div class="code">
        <m>Fonction appliquée à chaque pixel</m>
        <p><r>void</r> filtrePixel(<r>int</r> i, <r>int</r> j) {</p>
        <p><T/><r>int</r> valeur = 128 + (<r>smileyGet</r>(i, j) - <r>smileyGet</r>(i + 1, j));</p>
        <p><T/><r>smileySet</r>(i, j, valeur);</p>
        <p>}</p>
        <m>Boucle sur tous les pixels</m>
        <p><r>void</r> filtre() {</p>
        <p><T/><r>for</r>(<r>int</r> j = -<r>smileyHeight</r>() + 1; j &lt;= <r>smileyHeight</r>() - 1; j = j + 1) {</p>
        <p><T/><T/><r>for</r>(<r>int</r> i = -<r>smileyHeight</r>() + 1; i &lt;= <r>smileyHeight</r>() - 1; i = i + 1) {</p>
        <p><T/><T/><T/>filtrePixel(i, j);</p>
        <p><T/><T/>}</p>
        <p><T/>}</p>
        <p>}</p>
        <p/>
        <p><r>void main</r>() {</p>
        <p><T/><r>smileyLoad</r>("http://facets.inria.fr/javascool/doisneaubuffon.jpg");</p>
        <p><T/>filtre();</p>
        <p>}</p>
      </div><div class="ul">
       <div>Que se passe t'il dans ce cas ? Décrivez ce que vous observez.</div>
       <div>Pourquoi avoir ajouté <c>128</c> ? Essayez avec les expressions <b>valeur = (<r>smileyGet</r>(i, j) - <r>smileyGet</r>(i + 1, j));</b> 
       puis <b>valeur = -(<r>smileyGet</r>(i, j) - <r>smileyGet</r>(i + 1, j));</b> pour bien comprendre ce qui se passe.</div>
       <div>Comment observer la même chose avec les contours horizontaux ? Proposez une nouvelle fonction pour ce faire.</div>
       <div>Essayez la construction <b>valeur = (<r>smileyGet</r>(i, j) - <r>smileyGet</r>(i + 1, j) - <r>smileyGet</r>(i, j + 1));</b> et commentez le résultat.</div>
       <div>Deux questions très subtiles, pour les «cracks» : <div class="ul">
         <div>Avez vous remarqué que la boucle de la fonction <b>filtre()</b> n'a pas les mêmes bornes d'itération pour ces filtres 
         que lors du 1er cas où on tranformait juste l'intensité d'un pixel ? Sauriez-vous dire pourqoi ?</div>
         <div>Que se passerait-il si on utilisait <b>valeur = 128 + (<r>smileyGet</r>(i, j) - <r>smileyGet</r>(i - 1, j));</b> : essayez et tentez d'expliquer pourquoi.</div>
       </div></div>
      </div>
    </div>
   </div>

  <div class="notes">
    <div title="Manipuler des objets numériques: l'exemple des images."> Le but de cette activité est, maintenant que nous <l link="http://interstices.info/reflet-numerique"/>, de regarder quelques opérations que nous pouvons effectuer sur ces objets numériques. Nous considérons ici des images où chaque pixel est  un nombre entre 0% pour le noir (considéré ici comme une absence de couleur) et 100% pour le blanc, donc des images monochromes qui vont de transparent à blanc. Nous allons essayer d'illustrer dans quelle mesure des opérations entre ces images peuvent prendre avoir un sens concret pour nous.</div>
    <div title="Ajouter deux images: l'effet de calque">. Que peux signifier "ajouter" deux images ? Tout simplement produire un effet de calque comme on le voit avec l'exemple ci-dessus. En ajoutant les deux images, c'est à dire en ajoutant les valeurs de chaque pixel de la première image à la valeur du pixel correspondant dans la seconde image, on obtient une image qui amalgame les valeurs des deux, un peu comme un effet de calque. Si nous avions considéré des pixels de couleurs alors en les ajoutant nous aurions mélangé les couleurs et obtenues des combinaisons diverses. De plus, la notion de calque est lié au fait que nous avons considéré la notion de transparence: il s'agit juste ici d'illustrer un principe.</div>
    <div title="Soustraire deux images: un détecteur de mouvement."> A quoi peut correspondre maintenant la "soustraction" de deux images, c'est à dire soustraire à chaque pixel de la première image, la valeur du pixel correspondant de la seconde ? Il est facile de voir que si les pixels ont une même valeur, alors la différence sera nulle: ainsi si rien n'a changé d'une image à l'autre, il n'y aura pas de différence. Si au contraire, quelque chose a changé, alors la différence sera ou positive (disons plutôt noire) ou négative (disons plutôt blanche) et nous détectons ainsi les changements, comme nous le voyons ci dessus pour deux images entre lesquelles la figurine a quelque peu bougé.
    Dans le cas d'un film, nous obtenons une "image de mouvement": la détection de ce qui bouge d'une image à l'autre. Ce qui est très intéressant c'est que dans les rétines biologiques ou dans les systèmes de vision artificiels qui analysent les mouvements, c'est un calcul tout à fait similaire qui est mis en oeuvre.</div>
    <div title="Manipuler les valeurs des pixels: réglage de contraste et de luminosité, etc..">  Regardons maintenant quelques opérations effectuées sur chaque valeur des pixels d'une image.<div class="ul">
    <div>Par exemple, prenons chaque pixel de l'image et décalons chaque valeur d'une quantité constante, par exemple en ajoutant un nombre donné. Que se passe t'il ? Les valeurs sombres deviennent plus claires, nous avons augmenté la luminosité de notre image. C'est exactement ce qui se passe sur le réglage de luminosité d'un écran: il s'agit d'ajouter ou retirer une valeur constante pour donner plus ou moins de lumière.</div>
    <div>Prenons maintenant chaque pixel et multiplions sa valeur par une quantité donnée, disons plus grande que un. Que se passe t'il ? Nous augmentons les amplitudes entre valeurs sombres et claires, nous avons augmenté le contraste de notre image. C'est exactement ce qui se passe sur le réglage de contraste d'un écran: il s'agit soit d'amplifier les écarts entre les valeurs donc favoriser les noirs et les blancs au détriment des gris, soit de diminuer ces écarts (en multipliant toutes les valeurs par un nombre plus petit que un) donc de rapprocher toutes les couleurs du gris.</div>
  </div>Beaucoup d'autres opérations sur la valeur des pixels peuvent facilement se prédire: par exemple que se passe t'il si nous prenons l'opposé de chaque valeur de pixel ? Les noirs deviennent blancs et les blancs deviennent noir et nous avons une opération dites d'``inverse vidéo´´.</div>
  <div title="Les images comme des objets algébriques:"> Les mathématiciens voient donc sûrement ces tableaux bi-dimensionnels que sont les images comme des objets algébriques que l'on peut ajouter (effet de calque), multiplier par un scalaire, translater etc... Ce sont effectivement des vecteurs d'un espace vectoriel dont les composantes sont rangées en tableau. Ce ne sont pas des matrices car multiplier deux images (au sens de la multiplication des matrices des valeurs de pixels) correspond à une opération qui n'a pas de sens (hormis pour un artiste surréaliste !) en ce qui concerne les images. Nous sommes donc face à des objets algébriques dotées d'opérations riches de propriétés, mais différents des objets usuels de l'algèbre linéaire. Les théoriciens de la vision par ordinateur ont largement explorés ces aspects formels.</div>
  </div>
</div>