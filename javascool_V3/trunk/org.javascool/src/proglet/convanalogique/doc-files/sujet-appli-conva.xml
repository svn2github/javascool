<div class="sujet" title="Un tutoriel sur la conversion analogique-numérique">
  
  
  
  
  <div class="objectif">
    Le but de ce tutoriel est de comprendre comment deviner une valeur  analogique à partir de comparaisons et de découvrir la recherche dichotomique.
    Une autre activité, plus autonome, sur la recherche dichotomique est proposée <l link="sujet-appli-dicho.htm" text="ici"/>.
    Il faut déja savoir <l link="sujet-hello-world.htm" text="utiliser l'interface"/>,
    se servir de <l link="sujet-about-variables.htm" text="variables"/> et avoir découvert l'<l link="sujet-about-if.htm" text="instruction conditionnelle"/> et 
    utiliser des <l link="sujet-about-while.htm" text="boucles"/>.
  </div>
  
  <div class="intros">
    <div><l class="icon" icon="img/execute.png"/> Choisir la proglet <c>Conva</c> et non <c>Konsol</c> dans le bouton lié à l'exécution.</div>
    <div>L'ordinateur peut grâce à un convertisseur numérique analogique générer une tension en volt, grâce à la fonction :
    <div class="code">
      <p><r>convaOut</r>(tension);</p>
    </div>
    cette <b>tension</b> est un <r>int</r> varie en 0 et 1.023 volts et est donnée en milli-volts et il peut aussi comparer cette tension à la tension inconnue avec la fonction :
    <div class="code">
      <p><r>convaCompare</r>();</p>
    </div>
     qui renvoie -1 si la tension inconnue est plus petite et 1 si elle plus grande ou égale.
    </div>
    <div>Le schéma est illustré ici :
     <div class="center"><l class="icon" icon="img/conv.png"/></div>
     Bien entendu, ici, nous simulons ce mécanisme par une petite proglet.
    </div>
   <div>
      Comment deviner la tension inconnue qui varie entre 0 est 1023 millivolts ?
   </div>
  </div>
  <div class="works">
    <div title="Tester toutes les valeurs">Essayer le programme suivant :
    <div class="code">
      <p><r>int</r> v = 1023;</p>
      <p><r>while</r>(v &gt;= 0) {</p>
      <p><T/><r>convaOut</r>(v);</p>
      <p><T/><r>if</r> (<r>convaCompare</r>() == 1) {</p>
      <p><T/><T/><r>echo</r>("valeur = "+v);</p>
      <p><T/>}</p>
      <p><T/>v = v - 1;</p>
      <p>}</p>
    </div><div class="ul">
      <div>Que se passe t'il ? Que manque t'il pour qu'il fonctionne comme nous l'espérions ? </div>
      <div>Ajoutons alors l'instruction <r>break;</r> (que nous découvrons ici) et qui permet de sortir de la boucle <r>while</r> : 
      si le programme rencontre <r>break;</r>, il sort de la boucle. A quel endroit l'insérer pour que cela marche ?</div>
    </div>Noter que cet algorithme est bien long car il faut essayer toutes les valeurs.</div>
    <div title="Couper le problème en deux">
      Voici une idée : On va couper l'espace de recherche en deux, puis en deux, puis en deux, etc. Dans le programme suivant on a déjà divisé l'espace de recherche en 2 !
      <div class="code">
        <m>La valeur est donc comprise entre 0 et 1023</m>
        <p><r>convaOut</r>(512); <r>if</r> (<r>convaCompare</r>() == 1) {</p>
        <m>Si le test est vrai, nous savons que la valeur est plus petite que 512</m>
        <p><T/><r>echo</r>(<v>La valeur est comprise entre 0 et 511</v>);</p>
        <m>A vous de compléter en comparant à 256</m>
        <p>} <r>else</r> {</p>
        <m>Si le test est faux, nous savons que la valeur est plus grande ou égale à 512</m>
        <p><r>echo</r>(<v>La valeur est comprise entre 512 et 1023</v>);</p>
        <m>A vous de compléter en comparant à 768</m>
        <p>}</p>
      </div><div class="ul">
        <div>Compléter ce code en comparant à 256 et 768, puis utilisant le tableau ci dessous à 128, etc. Et essayer le résultat ...
          <div class="center"><l class="icon" icon="img/dicho.png"/></div>
          On remarque qu'en 3 étapes nous avons déjà une idée de la valeur à 12.5% près, mais c'est bien long à écrire !</div>
        <div>Notez que les intervalles sont de :
          <div>512 milli-volts à la 1ère étape</div>
          <div>256 milli-volts à la 2ème étape</div>
          <div>128 milli-volts à la 3ème étape</div>
        et si nous avions continué les intervalles suivantes auraient quelles valeurs ? Continuer jusqu'à trouver une intervalle plus petite que 1.
          <div>Ce calcul se fait en combien d'étapes finalement ? Et ceci au lieu de ... tester les 1024 valeurs !</div></div>
     </div></div>
     <div title="L'algorithme dichotomique">Essayons maintenant avec une boucle :
     <div class="code">
       <m> ? à vous de commenter les lignes qui suivent</m>
       <p><r>int</r> min = 0, max = 1024;</p>
       <p><r>while</r>(max - min &gt; 1) {</p>
       <p><T/><r>echo</r>(<v>La valeur est comprise entre </v> + (min) + <v> et </v> + (max - 1));</p>
       <m> ? à vous de COMPLETER et commenter les lignes qui suivent</m>
       <p><T/><r>int</r> milieu = (min + max) / 2;</p>
       <p><T/><r>convaOut</r>(milieu); <r>if</r> (<r>convaCompare</r>() == 1) {</p>
       <p><T/><T/>??? = ???;</p>
       <p><T/>} <r>else</r> {</p>
       <p><T/><T/>??? = ???;</p>
       <p><T/>}</p>
       <p>}</p>
     </div><div class="ul">
       <div>Compléter ce programme et ajouter au texte de programme des commentaires à chaque ligne pour expliquer comment il fonctionne.</div>
       <div>Essayez-le et concluez sur l'intérêt d'utiliser une telle méthode qui divise l'espace de recherche par 2 puis 2 etc.</div>
       <div>A l'aide de <l link="http://fr.wikipedia.org" text="wikipedia"/> expliquer en deux lignes pourquoi cette méthode s'appelle dichotomique.</div>
     </div></div>
     <div title="Aller plus loin">Supposez que nous regardions l'annuaire téléphonique des 1048576 habitants des Alpes-Maritimes, triés par ordre alphabétique :<div class="ul">
       <div>Expliquez en 2/3 lignes comment utiliser une méthode dichotomique pour chercher une personne parmi plus d'un million de personnes !</div>
       <div>A l'aide de la suite des chiffres suivants, devinez en combien d'étapes la recherche dichotomique permet de trouver une personne parmi ce gros million :
         <div><c>0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576</c></div>
         Note : cette liste de chiffres sont les puissances de 2: 2^0, 2^1, 2^2, etc...
       </div>
       <div>A partir de la ligne de code<l class="note" link="1"/> :
       <div class="code">
         <p>n = n + 1; u  = u * 2;  <r>echo</r>("2^" + n + "=" + u);</p>
       </div>écrire une boucle qui calcule les puissances de 2 de 0 à 20.</div>
     </div></div>
   </div>
   <div class="notes">
     <div>La fonction <b><r>void</r> <c>echo</c>(<r>String</r> string)</b> affiche une chaîne de caractères sur la console.</div>
   </div>
</div>