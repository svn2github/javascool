<sujet>
  <titre>Un tutoriel utiliser des boucles.</titre>
  
  <proglet name="Konsol" mode="edit"/>
  
  <objectif>
    Le but de ce tutoriel d'apprendre à  utiliser des boucles. Il faut déja savoir <a href="sujet-hello-world.htm">utiliser l'interface</a>,
  se servir de <a href="sujet-about-variables.htm">variables</a>, avoir découvert l'instruction <a href="sujet-about-if.htm">conditionnelle</a>, 
  et s'être familiarisé avec les <a href="sujet-about-functions.htm">fonctions</a>.
  </objectif>
  
  <notes>
    <note title="Imprimer 10 fois la même chose"> Supposons vouloir imprimer <s>Hello world</s> 10 fois, bien sûr, nous pouvons écrire:
    <code>
      <p><r>void main</r>() {</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p>}</p>
     </code> mais si nous devons écrire un code qui doit répéter un million de fois une action, nous ne sommes pas rendu ! Regardons alors cette autre solution:
    <code>
      <p><r>void main</r>() {</p>
      <p><t/><r>int</r> n = 0;</p>
      <p><t/><r>while</r>( n &lt; 10) {</p>
      <p><t/><t/><r>println</r>(<s>Hello World !</s>);</p>
      <p><t/><t/>n = n + 1;</p>
      <p><t/>}</p>
      <p>}</p>
    </code> où <ul>
      <li>nous avons défini un compteur <b>n</b> qui initialisé à la valeur zéro (<b><r>int</r> n = 0;</b>),</li>
      <li>puis, tant qu'il est plus petit que 10 (<b><r>while</r>( n &lt;  10)</b>),</li>
      <li>nous imprimons <s>Hello world</s>,</li>
      <li>et incrémetons (c'est à dire lui ajoutons 1) sa valeur (<b>n = n + 1;</b>).</li>
    </ul>Non sans bien noter le jeu d'accolades { } pour ouvrir est fermer <b><r>void main</r>()</b> et <b><r>while</r>( n &lt; 10)</b>.
    Nous voilà avec un mécanisme qui va nous permettre de répéter autant de fois de nécessaire une action.
   </note>
   <note title="Tous les ingrédients des algorithmes"> Il y a quelque chose de formidable ici: 
   avec des <a href="sujet-about-variables.htm">variables</a> et des <a href="sujet-about-functions.htm">fonctions</a>, 
   une <a href="sujet-hello-world.htm">séquence</a> d'instruction, 
   l'instruction <a href="sujet-about-if.htm">conditionnelle</a>, 
   et une instruction<footnote id="1"/> pour faire des <a href="sujet-about-while.htm">boucles</a>, 
   nous avons <i>tous les ingrédients</i> pour programmer efficacement <i>tous les algorithmes possibles</i>! 
   Il y a bien entendu une subtilité ici: les fonctions doivent pouvoir s'appeler elle-même, c'est à dire être recursives<footnote id="2"/>.
   Mais la <i>plus part</i> des programmes que nous avons besoin de faire, n'ont pas besoin de fonctions récursives et se programment très bien avec les ingrédients
   proposés ici, grâce aux boucles.
   </note>
 </notes>

  <works>
    <work title="A nous de jouer">Recopier le 2ème programme proposé ci-dessus et:<ul>
      <li>Le modifier pour imprimer 11 fois le <s>Hello World !</s>.</li>
      <li>Puis partir de n = 1 (donc écrire <b><r>int</r> n = 1;</b>) et le modifier pour écrire 8 fois <s>Hello World !</s>.</li>
      <li>Retirer la ligne <b>n = n + 1;</b>: que se passe t'il<footnote id="3"/>?</li>
      <li>Remplacer la ligne <b>n = n + 1;</b> par <b>n = n - 1;</b> et expliquer ce qui se passe.</li>
    </ul></work>
    <work title="Comprendre quelques exemples de boucles">Pour chacun des bouts de codes suivants, expliquer ce qui est calculé (vous pouvfez essayer les codes si besoin): <ul>
      <li>Combien de fois s'exécute cette boucle ?
      <code> 
        <p><r>int</r> n = 5;</p>
        <p><r>while</r>( n >= 0) {</p>
        <p><t/><r>println</r>(<s>Hello World !</s>);</p>
        <p><t/>n = n - 1;</p>
        <p>}</p>
      </code></li>
      <li>Combien de fois s'exécute cette boucle ?
      <code> 
        <p><r>int</r> n = 0;</p>
        <p><r>while</r>( n == 5) {</p>
        <p><t/><r>println</r>(<s>Hello World !</s>);</p>
        <p><t/>n = n + 2;</p>
        <p>}</p>
      </code></li>
      <li>Que calcule cette fonction ?
      <code>
        <p><r>int</r> mul(<r>int</r> x, <r>int</r> y) {</p>
        <p><t/><r>int</r> r = 0;</p>
        <p><t/><r>while</r>( x > 0) {</p>
        <p><t/><t/>r = r + y;</p>
        <p><t/><t/>x = x - 1;</p>
        <p><t/>}</p>
        <p><t/><r>return</r> r;</p>
        <p>}</p>
      </code></li>
    </ul></work>
    <work title="Programmer quelques boucles">: <ul>
      <li>Programmer une boucle qui imprime tous les nombres impairs de 1 à 39 inclus, avec l'instruction <b><r>println</r>(<s>n = </s> + n);</b></li>
      <li>Le <a href="http://fr.wikipedia.org/wiki/Nombre_d'or">nombre d'or</a> est défini par une suite 
      (qui n'est pas celle de <a href="http://fr.wikipedia.org/wiki/Nombre_d'or#Suite_de_Fibonacci">Fibonacci</a>) de la forme:
      <b>r = 1 + 1 / r</b> initialisée avec <b>r = 1</b>. Ecrire une boucle qui calcule part de <b>r = 1</b> et calcule 30 fois <b>r = 1 + 1 / r</b> en imprimant
      à chaque fois <b>r</b> (par exemple avec l'instruction <b><r>println</r>(<s>r = </s> + r);</b> et commenter le résultat. 
      Comparer avec les valeurs du nombre d'or connues par ailleurs.</li>
      <li>Avec votre professeur (ou quelqu'un pour vous aider si besoin) calculer les 100 premières décimales de <a href="http://fr.wikipedia.org/wiki/Pi#M.C3.A9thode_d.E2.80.99Archim.C3.A8de">PI</a> par la méthode d'Archimède.</li>
    </ul></work>
  </works>
  
  <footnotes>
    <p title="D'autres formes de boucles"> Les langages informatiques proposent d'autres formes de boucles, qui sont équivalentes à la construction <r>while</r> apprise ici, 
    mais peuvent être plus pratiques à utiliser. En voici deux exemples: <ul>
      <li>La boucle <r>for</r> permet de rassembler en une ligne la boucle avec un compteur que nous avons découvert ici. Le même programme peut s'écrire:
      <code>
        <p><r>void main</r>() {</p>
        <p><t/><r>for</r>(<r>int</r> n = 0; n &lt; 10; n = n + 1) {</p>
        <p><t/><t/><r>println</r>(<s>Hello World !</s>);</p>
        <p><t/>}</p>
        <p>}</p>
      </code> ce qui est plus concis .. mais ne change rien sur le fond.</li>
      <li>L'itérateur <r>foreach</r> permet d'énumérer tous les éléments d'une liste sans ce soucier d'utiliser un <r>while</r>, 
      par exemple (attention ce n'est PAS du <javascool/> !) 
      <code>
        <p><c>foreach(nom, liste_de_noms) {</c></p>
        <p><t/><c>envoyer_un_mail(nom);</c></p>
        <p><c>}</c></p>
      </code>permet dans d'autres langages comme le PHP de, par exemple ici, poster un mail à toute une liste de noms.</li>
    </ul>En bref, nous avons d'autres façons de faire mais nous connaissons déja les <i>fondements</i> dont nous avons besoin.</p>
    <p title="A propos de fonctions récursives"> Imaginons une fonction <r>A</r> qui appelle, selon ses entrées, une fonction <r>B</r> 
  qui appelle elle-même la fonction <r>A</r> ou tout autre combinaison telle que, finalement et selon ses entrées, la fonction <r>A</r> se rappelle elle-même. 
  On dit qu'elle est <i><a href="http://fr.wikipedia.org/wiki/Algorithme_récursif">récursive</a></i>: 
  cela peut donner des boucles infinies (donc des bugs !), ou des calculs très complexes et très intéressants . . et 
  c'est plus compliqué que ce que nous pouvons découvrir ici, alors retenons juste deux choses: <ul>
    <li>Il faut éviter de définir des fonctions récursives, sauf dans les cas indispensable.</li>
    <li>Il faut être prudent si c'est le cas, et bien comprendre la notion de <a href="sujet-about-while.htm">boucle</a> avant.</li>
  </ul>.</p>
  <p title="Arrêter un programme"> C'est le bouton <img src="img/stop.png"/> qui permet d'arrêter un programme qui boucle indéfiniment.</p>
  </footnotes>
</sujet>
